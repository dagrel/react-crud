import React, { Component } from 'react';
import { withNamespaces, Trans } from 'react-i18next';
import ContentWrapper from '../Layout/ContentWrapper';
import { Row, Col, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Tooltip, Progress, Card, CardBody, Button, Modal, ModalHeader, ModalBody, ModalFooter, Input } from 'reactstrap';
import Case from './MeetingCase';

import swal from 'sweetalert';

import Scrollable from '../Common/Scrollable'

import { firebaseTimestamp, DB, OrgKey } from '../Common/firebase';
import 'loaders.css/loaders.css';

import FormValidator from '../Forms/FormValidator.js';

export default class MeetingCases extends Component {
    constructor(props, context) {
        super();

        this.meetingCasesRef = DB.collection(`organizations/${window.localStorage.getItem(OrgKey)}/rooms/styrearbeid/meetings/${props.meetingId}/cases`);
        
        this.unsubscribeMeetingCases = null;
        
        this.state = {
            loadingMeetingCases: true,
            cases: [

            ],
            formCase: {
                comment: ''
            },
            formCaseLoading: false,
        };
    }

    componentDidMount() {
        this.unsubscribeMeetingCases = this.meetingCasesRef.orderBy("created", "asc").onSnapshot(this.onMeetingCasesUpdate);
    }
    
    componentWillUnmount() {
        this.unsubscribeMeetingCases();
    }

    onMeetingCasesUpdate = (querySnapshot) => {
        let cases = [];
      
        querySnapshot.forEach((doc) => {
          const caseObj = doc.data();
          caseObj.key = doc.id;
          cases.push(caseObj);
        });

        this.setState({ 
            cases,
            loadingMeetingCases: false,
        });
    }

    validateOnChange = event => {
        const input = event.target;
        const form = input.form
        const value = input.type === 'checkbox' ? input.checked : input.value;

        const result = FormValidator.validate(input);

        this.setState({
            [form.name]: {
                ...this.state[form.name],
                [input.name]: value,
                errors: {
                    ...this.state[form.name].errors,
                    [input.name]: result
                }
            }
        });

    }

    onSubmitCase = e => {
        const form = e.target;
        const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName))

        const { errors, hasError } = FormValidator.bulkValidate(inputs)

        this.setState({
            [form.name]: {
                ...this.state[form.name],
                errors
            }
        });

        if(!hasError && this.state.formCase.comment.length > 0){
            /*
            e.preventDefault();
            console.log(this.state.formCase);

            let tstate = this;
            this.setState({
                formCaseLoading: true
            });

            let case = {
                by: "person navn",
                created: firebaseTimestamp.fromDate(new Date()),
                description: this.state.formCase.comment,
                type: "comment"
            }

            this.meetingCasesRef.doc().set(case).then(function() {
                //swal("Ok", "Saken har blitt lagt til", "success");

                tstate.setState({
                    formCaseLoading: false,
                    formCase: {
                        comment: ''
                    }
                });
            }).catch(err => {
                console.log(err);
                swal("Feil", "Det oppstod en feil, vennligst prÃ¸v igjen senere", "error");

                tstate.setState({
                    formCaseLoading: false
                });
            });
            */
        }

        e.preventDefault();
    }

    /* Simplify error check */
    hasError = (formName, inputName, method) => {
        return  this.state[formName] &&
                this.state[formName].errors &&
                this.state[formName].errors[inputName] &&
                this.state[formName].errors[inputName][method]
    }

    render() {
        function cases(loading, cases){
            if(loading){
                return <div className="ball-pulse" style={{ textAlign: 'center' }}>
                    <div></div>
                    <div></div>
                    <div></div>
                </div>;
            } else {
                let caseList = cases.map((caseObj, index) => (
                    <Case key={index} caseObj={caseObj}></Case>
                ));
                return caseList;
            }
        }

        return (
            <Row>
                <Col xl={ 12 }>
                    <Scrollable className="list-group card-body" height={this.props.height}>
                        <ul style={{ listStyleType: "none", paddingLeft: "0px"}}>
                            {cases(this.state.loadingMeetingCases, this.state.cases)}
                        </ul>
                    </Scrollable>
                </Col>
            </Row>
        );
    }
}